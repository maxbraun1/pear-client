{"ast":null,"code":"var _jsxFileName = \"C:\\\\Dev\\\\MERN-Project\\\\client\\\\src\\\\components\\\\posts\\\\post\\\\postInteractions.js\",\n    _s = $RefreshSig$();\n\nimport { useState, useEffect, useContext } from \"react\";\nimport { useNavigate } from \"react-router-dom\";\nimport Axios from \"axios\";\nimport classes from \"./postInteractions.module.css\";\nimport heartIcon from \"../../../assets/icons/heartIcon.svg\";\nimport heartIconLiked from \"../../../assets/icons/heartIcon-liked.svg\";\nimport requestIcon from \"../../../assets/icons/requestIcon.svg\";\nimport commentIcon from \"../../../assets/icons/commentIcon.svg\";\nimport { LoggedContext } from \"../../../App\";\nimport { PostContext } from \"./post.js\";\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nimport { Fragment as _Fragment } from \"react/jsx-dev-runtime\";\n\nfunction PostInteractions(props) {\n  _s();\n\n  const navigate = useNavigate();\n  const [requestAlreadyMade, setRequestAlreadyMade] = useState(false);\n  const [postLiked, setPostLiked] = useState(false);\n  const [request, setRequest] = useState(false);\n  const {\n    postUpToDate,\n    setPostUpToDate\n  } = useContext(PostContext);\n  const {\n    loggedStatus,\n    setLoggedStatus\n  } = useContext(LoggedContext);\n  const [message, setMessege] = useState(null);\n  useEffect(() => {\n    setPostLiked(props.postLikes.includes(loggedStatus));\n\n    if (loggedStatus !== false) {\n      Axios.post(\"http://localhost:3001/requests/checkRequest\", {\n        postID: props.postID\n      }, {\n        withCredentials: true\n      }).then(response => {\n        if (response.data === true) {\n          setRequestAlreadyMade(true);\n        }\n      });\n    }\n  }, [props.postLikes, loggedStatus]);\n\n  function toggleRequest() {\n    if (loggedStatus !== false) {\n      setRequest(!request);\n    } else {\n      navigate(\"/login\");\n    }\n  }\n\n  function likePost() {\n    // If User is Logged in\n    if (loggedStatus !== false) {\n      Axios.post(\"http://localhost:3001/posts/like\", {\n        userID: loggedStatus,\n        postID: props.postID\n      }, {\n        withCredentials: true\n      }).then(response => {\n        if (response.data === true) {\n          setPostUpToDate(!postUpToDate);\n        } else {\n          console.log(response.data);\n        }\n      });\n    } else {\n      navigate(\"/login\");\n    }\n  }\n\n  function sendRequest() {\n    if (loggedStatus !== false) {\n      Axios.post(process.env.REACT_APP_API + \"/requests/createRequest\", {\n        message,\n        postID: props.postID\n      }, {\n        withCredentials: true\n      }).then(response => {\n        if (response.data.error === false) {\n          // success\n          setMessege(\"\");\n          setRequest(false);\n          setRequestAlreadyMade(true);\n        } else {\n          // fail\n          alert(response.data.message);\n        }\n      });\n    } else {\n      navigate(\"/login\");\n    }\n  }\n\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: classes.postInteractions,\n    children: [/*#__PURE__*/_jsxDEV(\"div\", {\n      className: classes.postInteractionButton,\n      onClick: likePost,\n      children: [/*#__PURE__*/_jsxDEV(\"img\", {\n        src: postLiked ? heartIconLiked : heartIcon,\n        alt: \"like button\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 79\n      }, this), props.postLikesCount]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 13\n    }, this), !requestAlreadyMade ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.postInteractionButton,\n        onClick: toggleRequest,\n        children: /*#__PURE__*/_jsxDEV(\"img\", {\n          src: requestIcon,\n          alt: \"request button\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 81,\n          columnNumber: 84\n        }, this)\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 81,\n        columnNumber: 13\n      }, this)\n    }, void 0, false) : /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.postInteractionButtonRequestSent,\n        children: \"Request Sent\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 83,\n        columnNumber: 13\n      }, this)\n    }, void 0, false), request ? /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.requestOverlay,\n        onClick: toggleRequest\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"div\", {\n        className: classes.requestForm,\n        children: [/*#__PURE__*/_jsxDEV(\"p\", {\n          className: classes.requestFormTitle,\n          children: \"Want to Collaborate?\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 89,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"textarea\", {\n          onChange: e => setMessege(e.target.value),\n          value: message || \"\",\n          className: classes.requestFormMessage,\n          placeholder: \"Send a message with your request (optional).\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 90,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          className: classes.requestFormDisclaimer,\n          children: [/*#__PURE__*/_jsxDEV(\"span\", {\n            className: classes.requestFormAsterisk,\n            children: \"*\"\n          }, void 0, false, {\n            fileName: _jsxFileName,\n            lineNumber: 91,\n            columnNumber: 62\n          }, this), \" Sending request will give the poster access to your contact information (Email Address).\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 91,\n          columnNumber: 17\n        }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n          className: classes.requestFormButton,\n          onClick: sendRequest,\n          children: \"Request to Join\"\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 92,\n          columnNumber: 17\n        }, this)]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 88,\n        columnNumber: 13\n      }, this)]\n    }, void 0, true) : null]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 78,\n    columnNumber: 9\n  }, this);\n}\n\n_s(PostInteractions, \"2ZW+oZZqurAGc6iaV8w9N8VNk4M=\", false, function () {\n  return [useNavigate];\n});\n\n_c = PostInteractions;\nexport default PostInteractions;\n\nvar _c;\n\n$RefreshReg$(_c, \"PostInteractions\");","map":{"version":3,"sources":["C:/Dev/MERN-Project/client/src/components/posts/post/postInteractions.js"],"names":["useState","useEffect","useContext","useNavigate","Axios","classes","heartIcon","heartIconLiked","requestIcon","commentIcon","LoggedContext","PostContext","PostInteractions","props","navigate","requestAlreadyMade","setRequestAlreadyMade","postLiked","setPostLiked","request","setRequest","postUpToDate","setPostUpToDate","loggedStatus","setLoggedStatus","message","setMessege","postLikes","includes","post","postID","withCredentials","then","response","data","toggleRequest","likePost","userID","console","log","sendRequest","process","env","REACT_APP_API","error","alert","postInteractions","postInteractionButton","postLikesCount","postInteractionButtonRequestSent","requestOverlay","requestForm","requestFormTitle","e","target","value","requestFormMessage","requestFormDisclaimer","requestFormAsterisk","requestFormButton"],"mappings":";;;AAAA,SAASA,QAAT,EAAmBC,SAAnB,EAA8BC,UAA9B,QAAgD,OAAhD;AACA,SAASC,WAAT,QAA4B,kBAA5B;AACA,OAAOC,KAAP,MAAkB,OAAlB;AACA,OAAOC,OAAP,MAAoB,+BAApB;AACA,OAAOC,SAAP,MAAsB,qCAAtB;AACA,OAAOC,cAAP,MAA2B,2CAA3B;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,OAAOC,WAAP,MAAwB,uCAAxB;AACA,SAASC,aAAT,QAA8B,cAA9B;AACA,SAASC,WAAT,QAA4B,WAA5B;;;;AAEA,SAASC,gBAAT,CAA0BC,KAA1B,EAAiC;AAAA;;AAE7B,QAAMC,QAAQ,GAAGX,WAAW,EAA5B;AAEA,QAAM,CAACY,kBAAD,EAAqBC,qBAArB,IAA8ChB,QAAQ,CAAC,KAAD,CAA5D;AACA,QAAM,CAACiB,SAAD,EAAYC,YAAZ,IAA4BlB,QAAQ,CAAC,KAAD,CAA1C;AACA,QAAM,CAACmB,OAAD,EAAUC,UAAV,IAAwBpB,QAAQ,CAAC,KAAD,CAAtC;AACA,QAAM;AAACqB,IAAAA,YAAD;AAAeC,IAAAA;AAAf,MAAkCpB,UAAU,CAACS,WAAD,CAAlD;AACA,QAAM;AAACY,IAAAA,YAAD;AAAeC,IAAAA;AAAf,MAAkCtB,UAAU,CAACQ,aAAD,CAAlD;AAEA,QAAM,CAACe,OAAD,EAAUC,UAAV,IAAwB1B,QAAQ,CAAC,IAAD,CAAtC;AAEAC,EAAAA,SAAS,CAAC,MAAM;AACZiB,IAAAA,YAAY,CAACL,KAAK,CAACc,SAAN,CAAgBC,QAAhB,CAAyBL,YAAzB,CAAD,CAAZ;;AAEA,QAAGA,YAAY,KAAK,KAApB,EAA0B;AACtBnB,MAAAA,KAAK,CAACyB,IAAN,CAAW,6CAAX,EAAyD;AAAEC,QAAAA,MAAM,EAAEjB,KAAK,CAACiB;AAAhB,OAAzD,EAAkF;AAACC,QAAAA,eAAe,EAAE;AAAlB,OAAlF,EAA2GC,IAA3G,CAAiHC,QAAD,IAAc;AAC1H,YAAGA,QAAQ,CAACC,IAAT,KAAkB,IAArB,EAA0B;AACtBlB,UAAAA,qBAAqB,CAAC,IAAD,CAArB;AACH;AACJ,OAJD;AAKH;AACJ,GAVQ,EAUP,CAACH,KAAK,CAACc,SAAP,EAAkBJ,YAAlB,CAVO,CAAT;;AAYA,WAASY,aAAT,GAAwB;AACpB,QAAGZ,YAAY,KAAK,KAApB,EAA0B;AACtBH,MAAAA,UAAU,CAAC,CAACD,OAAF,CAAV;AACH,KAFD,MAEK;AACDL,MAAAA,QAAQ,CAAC,QAAD,CAAR;AACH;AACJ;;AAED,WAASsB,QAAT,GAAmB;AACf;AACA,QAAGb,YAAY,KAAK,KAApB,EAA0B;AACtBnB,MAAAA,KAAK,CAACyB,IAAN,CAAW,kCAAX,EAA8C;AAAEQ,QAAAA,MAAM,EAAEd,YAAV;AAAwBO,QAAAA,MAAM,EAAEjB,KAAK,CAACiB;AAAtC,OAA9C,EAA6F;AAACC,QAAAA,eAAe,EAAE;AAAlB,OAA7F,EAAsHC,IAAtH,CAA4HC,QAAD,IAAc;AACrI,YAAGA,QAAQ,CAACC,IAAT,KAAkB,IAArB,EAA0B;AACtBZ,UAAAA,eAAe,CAAC,CAACD,YAAF,CAAf;AACH,SAFD,MAEK;AACDiB,UAAAA,OAAO,CAACC,GAAR,CAAYN,QAAQ,CAACC,IAArB;AACH;AACJ,OAND;AAOH,KARD,MAQK;AACDpB,MAAAA,QAAQ,CAAC,QAAD,CAAR;AACH;AACJ;;AAED,WAAS0B,WAAT,GAAsB;AAClB,QAAGjB,YAAY,KAAK,KAApB,EAA0B;AACtBnB,MAAAA,KAAK,CAACyB,IAAN,CAAWY,OAAO,CAACC,GAAR,CAAYC,aAAZ,GAA4B,yBAAvC,EAAiE;AAAElB,QAAAA,OAAF;AAAWK,QAAAA,MAAM,EAAEjB,KAAK,CAACiB;AAAzB,OAAjE,EAAmG;AAACC,QAAAA,eAAe,EAAE;AAAlB,OAAnG,EAA4HC,IAA5H,CAAkIC,QAAD,IAAc;AAC3I,YAAGA,QAAQ,CAACC,IAAT,CAAcU,KAAd,KAAwB,KAA3B,EAAiC;AAC7B;AACAlB,UAAAA,UAAU,CAAC,EAAD,CAAV;AACAN,UAAAA,UAAU,CAAC,KAAD,CAAV;AACAJ,UAAAA,qBAAqB,CAAC,IAAD,CAArB;AACH,SALD,MAKK;AACD;AACA6B,UAAAA,KAAK,CAACZ,QAAQ,CAACC,IAAT,CAAcT,OAAf,CAAL;AACH;AACJ,OAVD;AAWH,KAZD,MAYK;AACDX,MAAAA,QAAQ,CAAC,QAAD,CAAR;AACH;AACJ;;AAED,sBACI;AAAK,IAAA,SAAS,EAAET,OAAO,CAACyC,gBAAxB;AAAA,4BACI;AAAK,MAAA,SAAS,EAAEzC,OAAO,CAAC0C,qBAAxB;AAA+C,MAAA,OAAO,EAAEX,QAAxD;AAAA,8BAAkE;AAAK,QAAA,GAAG,EAAEnB,SAAS,GAAGV,cAAH,GAAoBD,SAAvC;AAAkD,QAAA,GAAG,EAAC;AAAtD;AAAA;AAAA;AAAA;AAAA,cAAlE,EAAwIO,KAAK,CAACmC,cAA9I;AAAA;AAAA;AAAA;AAAA;AAAA,YADJ,EAEM,CAACjC,kBAAD,gBAAsB;AAAA,6BACxB;AAAK,QAAA,SAAS,EAAEV,OAAO,CAAC0C,qBAAxB;AAA+C,QAAA,OAAO,EAAEZ,aAAxD;AAAA,+BAAuE;AAAK,UAAA,GAAG,EAAE3B,WAAV;AAAuB,UAAA,GAAG,EAAC;AAA3B;AAAA;AAAA;AAAA;AAAA;AAAvE;AAAA;AAAA;AAAA;AAAA;AADwB,qBAAtB,gBAEI;AAAA,6BACN;AAAK,QAAA,SAAS,EAAEH,OAAO,CAAC4C,gCAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AADM,qBAJV,EAQM9B,OAAO,gBAAG;AAAA,8BACZ;AAAK,QAAA,SAAS,EAAEd,OAAO,CAAC6C,cAAxB;AAAwC,QAAA,OAAO,EAAEf;AAAjD;AAAA;AAAA;AAAA;AAAA,cADY,eAEZ;AAAK,QAAA,SAAS,EAAE9B,OAAO,CAAC8C,WAAxB;AAAA,gCACI;AAAG,UAAA,SAAS,EAAE9C,OAAO,CAAC+C,gBAAtB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBADJ,eAEI;AAAU,UAAA,QAAQ,EAAGC,CAAD,IAAO3B,UAAU,CAAC2B,CAAC,CAACC,MAAF,CAASC,KAAV,CAArC;AAAuD,UAAA,KAAK,EAAE9B,OAAO,IAAI,EAAzE;AAA6E,UAAA,SAAS,EAAEpB,OAAO,CAACmD,kBAAhG;AAAoH,UAAA,WAAW,EAAC;AAAhI;AAAA;AAAA;AAAA;AAAA,gBAFJ,eAGI;AAAG,UAAA,SAAS,EAAEnD,OAAO,CAACoD,qBAAtB;AAAA,kCAA6C;AAAM,YAAA,SAAS,EAAEpD,OAAO,CAACqD,mBAAzB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,kBAA7C;AAAA;AAAA;AAAA;AAAA;AAAA,gBAHJ,eAII;AAAQ,UAAA,SAAS,EAAErD,OAAO,CAACsD,iBAA3B;AAA8C,UAAA,OAAO,EAAEnB,WAAvD;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,gBAJJ;AAAA;AAAA;AAAA;AAAA;AAAA,cAFY;AAAA,oBAAH,GAQH,IAhBV;AAAA;AAAA;AAAA;AAAA;AAAA,UADJ;AAoBH;;GArFQ5B,gB;UAEYT,W;;;KAFZS,gB;AAuFT,eAAeA,gBAAf","sourcesContent":["import { useState, useEffect, useContext } from \"react\";\r\nimport { useNavigate } from \"react-router-dom\";\r\nimport Axios from \"axios\";\r\nimport classes from \"./postInteractions.module.css\";\r\nimport heartIcon from \"../../../assets/icons/heartIcon.svg\";\r\nimport heartIconLiked from \"../../../assets/icons/heartIcon-liked.svg\";\r\nimport requestIcon from \"../../../assets/icons/requestIcon.svg\";\r\nimport commentIcon from \"../../../assets/icons/commentIcon.svg\";\r\nimport { LoggedContext } from \"../../../App\";\r\nimport { PostContext } from \"./post.js\";\r\n\r\nfunction PostInteractions(props) {\r\n\r\n    const navigate = useNavigate();\r\n\r\n    const [requestAlreadyMade, setRequestAlreadyMade] = useState(false);\r\n    const [postLiked, setPostLiked] = useState(false);\r\n    const [request, setRequest] = useState(false);\r\n    const {postUpToDate, setPostUpToDate} = useContext(PostContext);\r\n    const {loggedStatus, setLoggedStatus} = useContext(LoggedContext);\r\n\r\n    const [message, setMessege] = useState(null);\r\n\r\n    useEffect(() => {\r\n        setPostLiked(props.postLikes.includes(loggedStatus));\r\n\r\n        if(loggedStatus !== false){\r\n            Axios.post(\"http://localhost:3001/requests/checkRequest\",{ postID: props.postID },{withCredentials: true}).then((response) => {\r\n                if(response.data === true){\r\n                    setRequestAlreadyMade(true);\r\n                }\r\n            });\r\n        }\r\n    },[props.postLikes, loggedStatus]);\r\n\r\n    function toggleRequest(){\r\n        if(loggedStatus !== false){\r\n            setRequest(!request);\r\n        }else{\r\n            navigate(\"/login\");\r\n        }\r\n    }\r\n\r\n    function likePost(){\r\n        // If User is Logged in\r\n        if(loggedStatus !== false){\r\n            Axios.post(\"http://localhost:3001/posts/like\",{ userID: loggedStatus, postID: props.postID },{withCredentials: true}).then((response) => {\r\n                if(response.data === true){\r\n                    setPostUpToDate(!postUpToDate);\r\n                }else{\r\n                    console.log(response.data);\r\n                }\r\n            });\r\n        }else{\r\n            navigate(\"/login\");\r\n        } \r\n    }\r\n\r\n    function sendRequest(){\r\n        if(loggedStatus !== false){\r\n            Axios.post(process.env.REACT_APP_API + \"/requests/createRequest\",{ message, postID: props.postID },{withCredentials: true}).then((response) => {\r\n                if(response.data.error === false){\r\n                    // success\r\n                    setMessege(\"\");\r\n                    setRequest(false);\r\n                    setRequestAlreadyMade(true);\r\n                }else{\r\n                    // fail\r\n                    alert(response.data.message);\r\n                }\r\n            });\r\n        }else{\r\n            navigate(\"/login\");\r\n        } \r\n    }\r\n\r\n    return (\r\n        <div className={classes.postInteractions}>\r\n            <div className={classes.postInteractionButton} onClick={likePost}><img src={postLiked ? heartIconLiked : heartIcon} alt=\"like button\"/>{props.postLikesCount}</div>\r\n            { !requestAlreadyMade ? <>\r\n            <div className={classes.postInteractionButton} onClick={toggleRequest}><img src={requestIcon} alt=\"request button\"/></div>\r\n            </> : <>\r\n            <div className={classes.postInteractionButtonRequestSent}>Request Sent</div>\r\n            </>}\r\n\r\n            { request ? <>\r\n            <div className={classes.requestOverlay} onClick={toggleRequest}></div>\r\n            <div className={classes.requestForm}>\r\n                <p className={classes.requestFormTitle}>Want to Collaborate?</p>\r\n                <textarea onChange={(e) => setMessege(e.target.value)} value={message || \"\"} className={classes.requestFormMessage} placeholder=\"Send a message with your request (optional).\"></textarea>\r\n                <p className={classes.requestFormDisclaimer}><span className={classes.requestFormAsterisk}>*</span> Sending request will give the poster access to your contact information (Email Address).</p>\r\n                <button className={classes.requestFormButton} onClick={sendRequest}>Request to Join</button>\r\n            </div>\r\n            </> : null }\r\n        </div>\r\n    );\r\n}\r\n\r\nexport default PostInteractions;"]},"metadata":{},"sourceType":"module"}