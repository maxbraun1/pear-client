{"ast":null,"code":"import { LeveledEffectAction } from \"../EffectActions/LeveledEffectAction.js\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../../internal/qualifier/QualifierValue.js\";\nimport { prepareColor } from \"../../../internal/utils/prepareColor.js\";\n/**\n * @description Makes the background of the image transparent (or solid white for formats that do not support transparency).\n * @extends LeveledEffectAction\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\n\nclass MakeTransparentEffectAction extends LeveledEffectAction {\n  constructor() {\n    super(...arguments);\n    this._actionModel = {\n      actionType: 'makeTransparent'\n    };\n  }\n  /**\n   * @description Sets the tolerance used to accommodate variance in the background color.\n   * @param {number | string} value The tolerance used to accommodate variance in the background color. (Range: 0 to 100, Server default: 10)\n   */\n\n\n  tolerance(value) {\n    this._actionModel.tolerance = value;\n    const qualifierEffect = this.createEffectQualifier(this.effectType, value);\n    this.addQualifier(qualifierEffect);\n    return this;\n  }\n  /**\n   * @description Sets the color to make transparent.\n   * @param {string} color The HTML name of the color (red, green, etc.) or RGB hex code.\n   * @return {this}\n   */\n\n\n  colorToReplace(color) {\n    this._actionModel.color = color;\n    return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(color))));\n  }\n\n  static fromJson(actionModel) {\n    const {\n      actionType,\n      tolerance,\n      color\n    } = actionModel; // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n    // This allows the inheriting classes to determine the class to be created\n\n    const result = new this(actionType, tolerance);\n    tolerance && result.tolerance(tolerance);\n    color && result.colorToReplace(color);\n    return result;\n  }\n\n}\n\nexport { MakeTransparentEffectAction };","map":{"version":3,"sources":["C:/Dev/MERN-Project/client/node_modules/@cloudinary/url-gen/actions/effect/leveled/MakeTransparent.js"],"names":["LeveledEffectAction","Qualifier","QualifierValue","prepareColor","MakeTransparentEffectAction","constructor","arguments","_actionModel","actionType","tolerance","value","qualifierEffect","createEffectQualifier","effectType","addQualifier","colorToReplace","color","fromJson","actionModel","result"],"mappings":"AAAA,SAASA,mBAAT,QAAoC,yCAApC;AACA,SAASC,SAAT,QAA0B,0CAA1B;AACA,SAASC,cAAT,QAA+B,+CAA/B;AACA,SAASC,YAAT,QAA6B,yCAA7B;AACA;AACA;AACA;AACA;AACA;AACA;;AACA,MAAMC,2BAAN,SAA0CJ,mBAA1C,CAA8D;AAC1DK,EAAAA,WAAW,GAAG;AACV,UAAM,GAAGC,SAAT;AACA,SAAKC,YAAL,GAAoB;AAAEC,MAAAA,UAAU,EAAE;AAAd,KAApB;AACH;AACD;AACJ;AACA;AACA;;;AACIC,EAAAA,SAAS,CAACC,KAAD,EAAQ;AACb,SAAKH,YAAL,CAAkBE,SAAlB,GAA8BC,KAA9B;AACA,UAAMC,eAAe,GAAG,KAAKC,qBAAL,CAA2B,KAAKC,UAAhC,EAA4CH,KAA5C,CAAxB;AACA,SAAKI,YAAL,CAAkBH,eAAlB;AACA,WAAO,IAAP;AACH;AACD;AACJ;AACA;AACA;AACA;;;AACII,EAAAA,cAAc,CAACC,KAAD,EAAQ;AAClB,SAAKT,YAAL,CAAkBS,KAAlB,GAA0BA,KAA1B;AACA,WAAO,KAAKF,YAAL,CAAkB,IAAIb,SAAJ,CAAc,IAAd,EAAoB,IAAIC,cAAJ,CAAmBC,YAAY,CAACa,KAAD,CAA/B,CAApB,CAAlB,CAAP;AACH;;AACc,SAARC,QAAQ,CAACC,WAAD,EAAc;AACzB,UAAM;AAAEV,MAAAA,UAAF;AAAcC,MAAAA,SAAd;AAAyBO,MAAAA;AAAzB,QAAmCE,WAAzC,CADyB,CAEzB;AACA;;AACA,UAAMC,MAAM,GAAG,IAAI,IAAJ,CAASX,UAAT,EAAqBC,SAArB,CAAf;AACAA,IAAAA,SAAS,IAAIU,MAAM,CAACV,SAAP,CAAiBA,SAAjB,CAAb;AACAO,IAAAA,KAAK,IAAIG,MAAM,CAACJ,cAAP,CAAsBC,KAAtB,CAAT;AACA,WAAOG,MAAP;AACH;;AAhCyD;;AAkC9D,SAASf,2BAAT","sourcesContent":["import { LeveledEffectAction } from \"../EffectActions/LeveledEffectAction.js\";\nimport { Qualifier } from \"../../../internal/qualifier/Qualifier.js\";\nimport { QualifierValue } from \"../../../internal/qualifier/QualifierValue.js\";\nimport { prepareColor } from \"../../../internal/utils/prepareColor.js\";\n/**\n * @description Makes the background of the image transparent (or solid white for formats that do not support transparency).\n * @extends LeveledEffectAction\n * @memberOf Actions.Effect\n * @see Visit {@link Actions.Effect|Effect} for an example\n */\nclass MakeTransparentEffectAction extends LeveledEffectAction {\n    constructor() {\n        super(...arguments);\n        this._actionModel = { actionType: 'makeTransparent' };\n    }\n    /**\n     * @description Sets the tolerance used to accommodate variance in the background color.\n     * @param {number | string} value The tolerance used to accommodate variance in the background color. (Range: 0 to 100, Server default: 10)\n     */\n    tolerance(value) {\n        this._actionModel.tolerance = value;\n        const qualifierEffect = this.createEffectQualifier(this.effectType, value);\n        this.addQualifier(qualifierEffect);\n        return this;\n    }\n    /**\n     * @description Sets the color to make transparent.\n     * @param {string} color The HTML name of the color (red, green, etc.) or RGB hex code.\n     * @return {this}\n     */\n    colorToReplace(color) {\n        this._actionModel.color = color;\n        return this.addQualifier(new Qualifier('co', new QualifierValue(prepareColor(color))));\n    }\n    static fromJson(actionModel) {\n        const { actionType, tolerance, color } = actionModel;\n        // We are using this() to allow inheriting classes to use super.fromJson.apply(this, [actionModel])\n        // This allows the inheriting classes to determine the class to be created\n        const result = new this(actionType, tolerance);\n        tolerance && result.tolerance(tolerance);\n        color && result.colorToReplace(color);\n        return result;\n    }\n}\nexport { MakeTransparentEffectAction };\n"]},"metadata":{},"sourceType":"module"}